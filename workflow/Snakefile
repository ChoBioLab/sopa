from utils import WorkflowPaths, Args

paths = WorkflowPaths(config)
args = Args(paths, config)

localrules: all

rule all:
    input:
        paths.annotations if args.annotate else [],
        paths.explorer_experiment,
        paths.explorer_image,
        paths.report,
    shell:
        """
        echo ðŸŽ‰ Successfully run sopa
        echo â†’ SpatialData output directory: {paths.sdata_path}
        echo â†’ Explorer output directory: {paths.explorer_directory}
        echo â†’ Open the result in the explorer: 'open {paths.explorer_experiment}'
        """

rule to_spatialdata:
    input:
        paths.data_path if config["read"]["technology"] not in ["uniform", "toy_dataset"] else [],
    output:
        paths.sdata_zgroup if paths.data_path else [],
    conda:
        "sopa"
    resources:
        mem_mb=128_000,
    params:
        args_reader = str(args['read'])
    shell:
        """
        sopa read {paths.data_path} --sdata-path {paths.sdata_path} {params.args_reader}
        """

checkpoint patchify_image:
    input:
        paths.sdata_zgroup,
    output:
        patches_file = paths.smk_patches_file_image,
        patches = touch(paths.smk_patches),
    params:
        args_patchify_image = str(args["patchify"].where(contains="pixel")),
    conda:
        "sopa"
    shell:
        """
        sopa patchify image {paths.sdata_path} {params.args_patchify_image}
        """

checkpoint patchify_transcripts:
    input:
        paths.sdata_zgroup,
        paths.smk_cellpose_boundaries if args.cellpose else [],
    output:
        patches_file = paths.smk_patches_file_transcripts,
        smk_transcripts_temp_dir = directory(paths.smk_transcripts_temp_dir),
    params:
        args_patchify_transcripts = args.patchify_transcripts(),
    conda:
        "sopa"
    shell:
        """
        sopa patchify transcripts {paths.sdata_path} {params.args_patchify_transcripts}
        """

rule patch_segmentation_cellpose:
    input:
        paths.smk_patches_file_image,
        paths.smk_patches,
    output:
        paths.smk_cellpose_temp_dir / "{index}.parquet",
    conda:
        "sopa"
    params:
        args_cellpose = str(args["segmentation"]["cellpose"]),
    shell:
        """
        sopa segmentation cellpose {paths.sdata_path} --patch-dir {paths.smk_cellpose_temp_dir} --patch-index {wildcards.index} {params.args_cellpose}
        """

rule patch_segmentation_baysor:
    input:
        patches_file = paths.smk_patches_file_transcripts,
        baysor_patch = paths.smk_transcripts_temp_dir / "{index}",
    output:
        paths.smk_transcripts_temp_dir / "{index}" / "segmentation_counts.loom",
    conda:
        "sopa"
    resources:
        mem_mb=128_000,
    params:
        baysor_config = str(args["segmentation"]["baysor"].where(keys=["config"])),
    shell:
        """
        if command -v module &> /dev/null; then
            module purge
        fi

        sopa segmentation baysor {paths.sdata_path} --patch-index {wildcards.index} {params.baysor_config}
        """

rule patch_segmentation_comseg:
    input:
        patches_file = paths.smk_patches_file_transcripts,
        comseg_patch = paths.smk_transcripts_temp_dir / "{index}",
    output:
        paths.smk_transcripts_temp_dir / "{index}" / "segmentation_polygons.json",
        paths.smk_transcripts_temp_dir / "{index}" / "segmentation_counts.h5ad",
    conda:
        "sopa"
    resources:
        mem_mb=128_000,
    params:
        comseg_config = str(args["segmentation"]["comseg"].where(keys=["config"])),
    shell:
        """
        sopa segmentation comseg {paths.sdata_path} --patch-index {wildcards.index} {params.comseg_config}
        """

def get_input_resolve(name, method_name):
    def _(wilcards):
        with getattr(checkpoints, f"patchify_{name}").get(**wilcards).output.patches_file.open() as f:
            return paths.cells_paths(f.read(), method_name)
    return _

rule resolve_cellpose:
    input:
        get_input_resolve("image", "cellpose"),
    output:
        touch(paths.smk_cellpose_boundaries),
    conda:
        "sopa"
    shell:
        """
        sopa resolve cellpose {paths.sdata_path} --patch-dir {paths.smk_cellpose_temp_dir}
        """

rule resolve_baysor:
    input:
        files = get_input_resolve("transcripts", "baysor"),
    output:
        touch(paths.smk_baysor_boundaries),
        touch(paths.smk_table),
    conda:
        "sopa"
    params:
        args_resolve = args.resolve_transcripts(),
    shell:
        """
        sopa resolve baysor {paths.sdata_path} {params.args_resolve}

        rm -r {paths.smk_transcripts_temp_dir}    # cleanup large baysor files
        """

rule resolve_comseg:
    input:
        files = get_input_resolve("transcripts", "comseg"),
    output:
        touch(paths.smk_comseg_boundaries),
        touch(paths.smk_table),
    conda:
        "sopa"
    params:
        args_resolve = args.resolve_transcripts(),
    shell:
        """
        sopa resolve comseg {paths.sdata_path} {params.args_resolve}

        rm -r {paths.smk_transcripts_temp_dir}    # cleanup large comseg files
        """

def get_smk_boundaries(args):
    if args.baysor:
        return paths.smk_baysor_boundaries
    elif args.comseg:
        return paths.smk_comseg_boundaries
    elif args.cellpose:
        return paths.smk_cellpose_boundaries
    else:
        raise ValueError("No segmentation method selected")

rule aggregate:
    input:
        get_smk_boundaries(args),
    output:
        touch(paths.smk_aggregation),
    conda:
        "sopa"
    params:
        args_aggregate = str(args["aggregate"] or ""),
    resources:
        mem_mb=64_000,
    shell:
        """
        sopa aggregate {paths.sdata_path} {params.args_aggregate}
        """

rule annotate:
    input:
        paths.smk_aggregation,
    output:
        directory(paths.annotations),
    conda:
        "sopa"
    resources:
        partition="gpgpuq" if args['annotation']['method'] == "tangram" else "shortq",
        gpu="a100:1" if args['annotation']['method'] == "tangram" else 0,
    params:
        method_name = args['annotation']['method'],
        args_annotation = str(args['annotation']['args']),
    shell:
        """
        sopa annotate {params.method_name} {paths.sdata_path} {params.args_annotation}
        """

rule image_write:
    input:
        paths.sdata_zgroup,
    output:
        paths.explorer_image,
    conda:
        "sopa"
    resources:
        mem_mb=64_000,
        partition="longq"
    params:
        args_explorer = str(args["explorer"].where(keys=['lazy', 'ram_threshold_gb', 'pixel_size', 'pixelsize'])),
    shell:
        """
        sopa explorer write {paths.sdata_path} --output-path {paths.explorer_directory} {params.args_explorer} --mode "+i" --no-save-h5ad
        """

rule report:
    input:
        get_smk_boundaries(args),
        paths.smk_aggregation,
        paths.annotations if args.annotate else [],
    output:
        paths.report,
    conda:
        "sopa"
    shell:
        """
        sopa report {paths.sdata_path} {paths.report}
        """

rule explorer:
    input:
        get_smk_boundaries(args),
        paths.smk_aggregation,
        paths.annotations if args.annotate else [],
    output:
        paths.explorer_experiment,
    conda:
        "sopa"
    resources:
        mem_mb=256_000,
    params:
        args_explorer = str(args["explorer"]),
    shell:
        """
        sopa explorer write {paths.sdata_path} --output-path {paths.explorer_directory} {params.args_explorer} --mode "-i"
        """
